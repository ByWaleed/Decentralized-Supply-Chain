// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.4.22 <0.9.0;

import "./Ownable.sol";
import "./roles/Consumer.sol";
import "./roles/Distributor.sol";
import "./roles/Manufacturer.sol";
import "./roles/Retailer.sol";

contract SupplyChain is Ownable, Consumer, Distributor, Manufacturer, Retailer {
    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint256 upc;

    // Define enum 'State' with the following values (from 0 to 6):
    enum State {
        Manufactured,
        Packed,
        ForSale,
        Sold,
        Shipped,
        Received,
        Purchased
    }

    State constant defaultState = State.Manufactured;

    struct Item {
        uint256 upc; // Universal Product Code (UPC), generated by the Manuufacturer, goes on the package, can be verified by the Consumer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 7 stages
        uint256 productPrice; // Product Price
        State itemState; // Product State as represented in the enum above

        address originManufacturerID; // Metamask-Ethereum address of the Manufacturer
        string originManufacturerName; // Manufacturer Name
        string originManufacturerInformation; // Manufacturer Information

        address distributorID; // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address consumerID; // Metamask-Ethereum address of the Consumer
    }

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping(uint256 => Item) items;

    // Define 7 events with the same 7 state values and accept 'upc' as input argument
    event Manufactured(uint256 upc);
    event Packed(uint256 upc);
    event ForSale(uint256 upc);
    event Sold(uint256 upc);
    event Shipped(uint256 upc);
    event Received(uint256 upc);
    event Purchased(uint256 upc);

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor() payable {
        upc = 1;
    }

    // Define a function 'kill' if required
    function kill() public {
        if (isOwner()) selfdestruct(payable(msg.sender));
    }

    // Define a function 'manufactureItem' that allows a manufacturer to mark an item 'Manufactured'
    function manufactureItem(
        uint256 _upc,
        address _originManufacturerID,
        string memory _originManufacturerName,
        string memory _originManufacturerInformation
    ) public onlyManufacturer {
        // Add the new item as part of Manufacturing
        items[_upc] = Item({
            upc: _upc,
            ownerID: _originManufacturerID,
            productPrice: 0,
            itemState: State.Manufactured,

            originManufacturerID: _originManufacturerID,
            originManufacturerName: _originManufacturerName,
            originManufacturerInformation: _originManufacturerInformation,

            distributorID: address(0),
            retailerID: address(0),
            consumerID: address(0)
        });

        // Emit the appropriate event
        emit Manufactured(_upc);
    }

    // Define a function 'packItem' that allows a manufacturer to mark an item 'Packed'
    // Call modifier to check if upc has passed previous supply chain stage
    // Call modifier to verify caller of this function
    function packItem(uint256 _upc)
        public
        manufactured(_upc)
        verifyCaller(msg.sender)
        onlyManufacturer
    {
        // Update the appropriate fields
        items[_upc].itemState = State.Packed;

        // Emit the appropriate event
        emit Packed(_upc);
    }

    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
    // Call modifier to check if upc has passed previous supply chain stage
    // Call modifier to verify caller of this function
    function sellItem(uint256 _upc, uint256 _price)
        public
        packed(_upc)
        verifyCaller(msg.sender)
        onlyManufacturer
    {
        // Update the appropriate fields
        items[_upc].itemState = State.ForSale;
        items[_upc].productPrice = _price;

        // Emit the appropriate event
        emit ForSale(_upc);
    }


    /*
     * Modifiers
    */

    // Define a modifer that verifies the Caller
    modifier verifyCaller(address _address) {
        require(
            msg.sender == _address,
            "Sender is not the caller of the contract."
        );
        _;
    }

    modifier manufactured(uint256 _upc) {
        require(
            items[_upc].itemState == State.Manufactured,
            "Product hasn't been manufactured."
        );
        _;
    }

    modifier packed(uint256 _upc) {
        require(
            items[_upc].itemState == State.Packed,
            "Product hasn't been packed."
        );
        _;
    }

    modifier forSale(uint256 _upc) {
        require(
            items[_upc].itemState == State.ForSale,
            "Product isn't for sale yet."
        );
        _;
    }

    modifier sold(uint256 _upc) {
        require(
            items[_upc].itemState == State.Sold,
            "Product hasn't been sold."
        );
        _;
    }

    modifier shipped(uint256 _upc) {
        require(
            items[_upc].itemState == State.Shipped,
            "Product hasn't been shipped."
        );
        _;
    }

    modifier received(uint256 _upc) {
        require(
            items[_upc].itemState == State.Received,
            "Product hasn't been received."
        );
        _;
    }

    modifier purchased(uint256 _upc) {
        require(
            items[_upc].itemState == State.Purchased,
            "Product hasn't been purchased."
        );
        _;
    }
}
